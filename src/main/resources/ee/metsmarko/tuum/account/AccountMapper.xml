<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ee.metsmarko.tuum.account.AccountMapper">
    <select id="getAccountById" resultMap="accountResultMap">
        select id, customer_id, country, currency, balance
        from account a
                 left join account_balance ab on a.id = ab.account_id
        where a.id = #{id}
    </select>
    <resultMap id="accountResultMap" type="Account">
        <id property="id" column="id"/>
        <result property="customerId" column="customer_id"/>
        <result property="country" column="country"/>
        <collection property="accountBalances" resultMap="accountBalanceMap"/>
    </resultMap>
    <resultMap id="accountBalanceMap" type="AccountBalance">
        <constructor>
            <arg column="currency" javaType="String" name="currency"/>
            <arg column="balance" javaType="BigDecimal" name="balance"/>
        </constructor>
    </resultMap>

    <insert id="createAccount" parameterType="Account"
            keyProperty="id" keyColumn="id" useGeneratedKeys="true">
        insert into account(customer_id, country)
        values (#{customerId}, #{country})
    </insert>

    <insert id="createAccountBalance" parameterType="Account">
        insert into account_balance (account_id, currency) values
        <foreach item="accountBalance" collection="accountBalances" separator=",">
            (#{id}, #{accountBalance.currency})
        </foreach>
    </insert>

    <update id="increaseBalance">
        update account_balance
        set balance = balance + #{amount}
        where account_id = #{accountId}
          and currency = #{currency}
    </update>

    <update id="decreaseBalance">
        update account_balance
        set balance = balance - #{amount}
        where account_id = #{accountId}
          and currency = #{currency}
    </update>

    <select id="getTransactionsByAccountId" resultType="Transaction">
        select id, account_id, amount, currency, direction, description
        from transaction
        where account_id = #{accountId}
        order by created_at asc
    </select>

    <insert id="createTransaction" parameterType="Transaction"
            keyProperty="id" keyColumn="id" useGeneratedKeys="true">
        insert into transaction (account_id, amount, currency, direction, description)
        values (#{accountId}, #{amount}, #{currency}, #{direction}, #{description})
    </insert>

    <select id="getBalanceForUpdate" parameterType="Transaction" resultType="AccountBalance">
        select currency, balance
        from account_balance
        where account_id = #{accountId}
          and currency = #{currency} for update;
    </select>
</mapper>
